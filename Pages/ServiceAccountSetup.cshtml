@page
@model mcp_service_account_auth_example.Pages.ServiceAccountSetupModel
@{
    ViewData["Title"] = "Service Account Setup - IAM Configuration Guide";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2d3748;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.2em;
        }
        .subtitle {
            text-align: center;
            color: #718096;
            margin-bottom: 30px;
            font-size: 1.1em;
        }
        .iam-banner {
            background: linear-gradient(135deg, #3182ce, #2c5282);
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 25px;
            text-align: center;
            font-weight: bold;
        }
        .warning-banner {
            background: linear-gradient(135deg, #ed8936, #dd6b20);
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 25px;
            text-align: center;
            font-weight: bold;
        }
        .provider-section {
            margin-bottom: 40px;
            padding: 25px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            background-color: #f7fafc;
        }
        .provider-title {
            font-size: 1.5em;
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }
        .provider-icon {
            font-size: 1.8em;
            margin-right: 15px;
        }
        .step-section {
            margin-bottom: 30px;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            border-left: 4px solid #3182ce;
        }
        .step-title {
            font-size: 1.2em;
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 15px;
        }
        .code-block {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 16px;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            white-space: pre-wrap;
            overflow-x: auto;
        }
        .copy-btn {
            background-color: #3182ce;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            margin-top: 8px;
        }
        .copy-btn:hover {
            background-color: #2c5282;
        }
        .security-note {
            background-color: #fff5f5;
            border-left: 4px solid #e53e3e;
            padding: 16px;
            margin: 20px 0;
            border-radius: 0 4px 4px 0;
        }
        .best-practice {
            background-color: #f0fff4;
            border-left: 4px solid #38a169;
            padding: 16px;
            margin: 20px 0;
            border-radius: 0 4px 4px 0;
        }
        .architecture-diagram {
            background-color: #edf2f7;
            border: 2px solid #cbd5e0;
            border-radius: 8px;
            padding: 20px;
            margin: 25px 0;
            text-align: center;
        }
        .flow-step {
            display: inline-block;
            background-color: #3182ce;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            margin: 5px;
            font-size: 0.9em;
        }
        .arrow {
            color: #3182ce;
            font-size: 1.5em;
            margin: 0 10px;
        }
        .table-container {
            overflow-x: auto;
            margin: 20px 0;
        }
        .setup-table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
            border-radius: 4px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .setup-table th {
            background-color: #4a5568;
            color: white;
            padding: 12px;
            text-align: left;
            font-weight: bold;
        }
        .setup-table td {
            padding: 12px;
            border-bottom: 1px solid #e2e8f0;
        }
        .setup-table tr:hover {
            background-color: #f7fafc;
        }
        .endpoint-section {
            background-color: #e6fffa;
            border: 1px solid #81e6d9;
            border-radius: 8px;
            padding: 20px;
            margin: 25px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Navigation -->
        <nav style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 30px; text-align: center;">
            <a href="/" style="color: #007bff; text-decoration: none; margin: 0 15px; font-weight: bold;">üè† Home</a>
            <a href="/Permissions" style="color: #007bff; text-decoration: none; margin: 0 15px; font-weight: bold;">üîí Permissions Guide</a>
            <a href="/ServiceAccountSetup" style="color: #28a745; text-decoration: none; margin: 0 15px; font-weight: bold;">‚öôÔ∏è IAM Setup Guide</a>
            <a href="/DeveloperGuidelines" style="color: #007bff; text-decoration: none; margin: 0 15px; font-weight: bold;">ü§ñ Developer Guidelines</a>
            <a href="/MarkdownGuide" style="color: #007bff; text-decoration: none; margin: 0 15px; font-weight: bold;">üìù Markdown for AI</a>
            <a href="/FunctionalExamples" style="color: #007bff; text-decoration: none; margin: 0 15px; font-weight: bold;">üöÄ Functional Examples</a>
        </nav>

        <h1>‚öôÔ∏è Service Account Setup & IAM Configuration</h1>
        <div class="subtitle">Identity & Access Management guide for MCP service account orchestration</div>

        <div class="iam-banner">
            üîê For Identity & Access Management Engineers and Information Security Associates
        </div>

        <div class="warning-banner">
            ‚ö†Ô∏è CRITICAL: Service accounts require proper security controls, rotation policies, and audit logging
        </div>

        <p style="text-align: center; color: #666; margin-bottom: 30px;">
            <strong>This guide covers service account provisioning and token orchestration setup across multiple IAM providers</strong><br>
            Enterprise service accounts ‚Ä¢ Token orchestration ‚Ä¢ Zero-credential architecture
        </p>

        <!-- Architecture Overview -->
        <div class="architecture-diagram">
            <h3 style="color: #2d3748; margin-top: 0;">üèóÔ∏è Service Account Token Orchestration Flow</h3>
            <div style="margin: 20px 0;">
                <div class="flow-step">1. Developer Config</div>
                <span class="arrow">‚Üí</span>
                <div class="flow-step">2. MCP Runtime</div>
                <span class="arrow">‚Üí</span>
                <div class="flow-step">3. Service Endpoint</div>
                <span class="arrow">‚Üí</span>
                <div class="flow-step">4. IAM Provider</div>
                <span class="arrow">‚Üí</span>
                <div class="flow-step">5. Fresh Token</div>
            </div>
            <p style="color: #4a5568; margin-top: 15px;">
                <strong>Zero-Credential Design:</strong> No secrets stored in developer environments or repositories
            </p>
        </div>

        <!-- Okta Configuration -->
        <div class="provider-section">
            <div class="provider-title">
                <span class="provider-icon">üî∂</span>
                Okta Configuration
            </div>

            <div class="step-section">
                <div class="step-title">Step 1: Create Service Account Application</div>
                <p>Create a new application in Okta Admin Console for MCP service account management:</p>
                
                <div class="table-container">
                    <table class="setup-table">
                        <thead>
                            <tr>
                                <th>Setting</th>
                                <th>Value</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>Application Type</strong></td>
                                <td>Web Application</td>
                                <td>Server-side application for secure token exchange</td>
                            </tr>
                            <tr>
                                <td><strong>Grant Types</strong></td>
                                <td>Client Credentials</td>
                                <td>Machine-to-machine authentication</td>
                            </tr>
                            <tr>
                                <td><strong>Token Endpoint Auth</strong></td>
                                <td>Client Secret (Basic)</td>
                                <td>Secure client authentication</td>
                            </tr>
                            <tr>
                                <td><strong>Access Token Lifetime</strong></td>
                                <td>1 hour (3600 seconds)</td>
                                <td>Short-lived tokens for security</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="step-section">
                <div class="step-title">Step 2: Configure OAuth Scopes</div>
                <p>Set up custom scopes for MCP service account access:</p>
                
                <div class="code-block">
Custom Scopes to Create:
- mcp:github:read
- mcp:azure:read  
- mcp:azure:work_write
- mcp:confluence:read
- mcp:confluence:write
- mcp:sqlserver:read
                </div>
            </div>

            <div class="step-section">
                <div class="step-title">Step 3: Service Account Endpoint Implementation</div>
                <p>Deploy the token orchestration endpoint that MCP clients will call:</p>
                
                <div class="code-block">
// ASP.NET Core Token Orchestration Endpoint
[HttpPost("/api/mcp-auth/token")]
public async Task&lt;IActionResult&gt; GetServiceToken([FromBody] TokenRequest request)
{
    // 1. Validate client credentials against Okta
    var oktaValidation = await ValidateOktaClient(request.ClientId, request.ClientSecret);
    if (!oktaValidation.IsValid) return Unauthorized();

    // 2. Determine requested service and scope
    var serviceConfig = GetServiceConfiguration(request.ServiceAccount);
    
    // 3. Request fresh token from target service
    var token = await RequestServiceToken(serviceConfig, request.Scope);
    
    // 4. Return fresh token to MCP client
    return Ok(new { 
        access_token = token.Value,
        expires_in = token.ExpiresIn,
        scope = request.Scope 
    });
}

private async Task&lt;ServiceToken&gt; RequestServiceToken(ServiceConfig config, string scope)
{
    switch (config.Provider)
    {
        case "github":
            return await GetGitHubToken(config.AppId, config.PrivateKey, scope);
        case "azure":
            return await GetAzureToken(config.ClientId, config.ClientSecret, scope);
        case "confluence":
            return await GetConfluenceToken(config.ApiKey, scope);
        default:
            throw new NotSupportedException($"Provider {config.Provider} not supported");
    }
}
                </div>
                <button class="copy-btn" onclick="copyToClipboard(this)">üìã Copy Endpoint Code</button>
            </div>

            <div class="step-section">
                <div class="step-title">Step 4: Okta API Configuration</div>
                <p>Configure Okta API access for the service account validation:</p>
                
                <div class="code-block">
# Okta Configuration (appsettings.json)
{
  "Okta": {
    "Domain": "https://your-domain.okta.com",
    "ClientId": "your-service-app-client-id",
    "ClientSecret": "your-service-app-client-secret",
    "TokenEndpoint": "https://your-domain.okta.com/oauth2/default/v1/token",
    "IntrospectEndpoint": "https://your-domain.okta.com/oauth2/default/v1/introspect"
  },
  "ServiceAccounts": {
    "github-service-account": {
      "Provider": "github",
      "AppId": "123456",
      "PrivateKeyPath": "/etc/ssl/certs/github-private-key.pem",
      "AllowedScopes": ["repo:read", "metadata:read"]
    },
    "azure-service-account": {
      "Provider": "azure",
      "ClientId": "12345678-1234-1234-1234-123456789012",
      "ClientSecret": "stored-in-azure-key-vault",
      "TenantId": "87654321-4321-4321-4321-210987654321",
      "AllowedScopes": ["https://dev.azure.com/user_impersonation"]
    }
  }
}
                </div>
                <button class="copy-btn" onclick="copyToClipboard(this)">üìã Copy Configuration</button>
            </div>
        </div>

        <!-- Microsoft Entra ID Configuration -->
        <div class="provider-section">
            <div class="provider-title">
                <span class="provider-icon">üî∑</span>
                Microsoft Entra ID (Azure AD) Configuration
            </div>

            <div class="step-section">
                <div class="step-title">Step 1: App Registration</div>
                <p>Create an App Registration in Azure Portal for MCP service account management:</p>
                
                <div class="code-block">
# Azure CLI Commands
az ad app create \
  --display-name "MCP-Service-Account-Orchestrator" \
  --identifier-uris "api://mcp-service-orchestrator" \
  --required-resource-accesses '[
    {
      "resourceAppId": "00000003-0000-0000-c000-000000000000",
      "resourceAccess": [
        {
          "id": "e1fe6dd8-ba31-4d61-89e7-88639da4683d",
          "type": "Scope"
        }
      ]
    }
  ]'

# Create Service Principal
az ad sp create --id &lt;app-id&gt;

# Create Client Secret
az ad app credential reset --id &lt;app-id&gt; --display-name "MCP-Orchestrator-Secret"
                </div>
                <button class="copy-btn" onclick="copyToClipboard(this)">üìã Copy Azure CLI Commands</button>
            </div>

            <div class="step-section">
                <div class="step-title">Step 2: API Permissions</div>
                <p>Configure the necessary API permissions for service account token management:</p>
                
                <div class="table-container">
                    <table class="setup-table">
                        <thead>
                            <tr>
                                <th>API</th>
                                <th>Permission</th>
                                <th>Type</th>
                                <th>Admin Consent</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>Microsoft Graph</strong></td>
                                <td>User.Read</td>
                                <td>Delegated</td>
                                <td>Required</td>
                            </tr>
                            <tr>
                                <td><strong>Azure DevOps</strong></td>
                                <td>user_impersonation</td>
                                <td>Delegated</td>
                                <td>Required</td>
                            </tr>
                            <tr>
                                <td><strong>Custom API</strong></td>
                                <td>MCP.ServiceAccount.Manage</td>
                                <td>Application</td>
                                <td>Required</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="step-section">
                <div class="step-title">Step 3: Token Exchange Implementation</div>
                <p>Implement Azure AD token validation and exchange:</p>
                
                <div class="code-block">
// Microsoft.Identity.Web implementation
public class AzureADTokenOrchestrator
{
    private readonly IConfidentialClientApplication _app;
    
    public AzureADTokenOrchestrator(IConfiguration config)
    {
        _app = ConfidentialClientApplicationBuilder
            .Create(config["AzureAd:ClientId"])
            .WithClientSecret(config["AzureAd:ClientSecret"])
            .WithAuthority(new Uri($"https://login.microsoftonline.com/{config["AzureAd:TenantId"]}"))
            .Build();
    }

    public async Task&lt;ServiceTokenResponse&gt; ExchangeTokenAsync(string clientAssertion, string scope)
    {
        // Validate client assertion
        var validationResult = await ValidateClientAssertion(clientAssertion);
        if (!validationResult.IsValid) throw new UnauthorizedAccessException();

        // Get service-specific token
        var serviceToken = await GetServiceTokenAsync(scope);
        
        return new ServiceTokenResponse
        {
            AccessToken = serviceToken.AccessToken,
            ExpiresIn = serviceToken.ExpiresIn,
            Scope = scope
        };
    }
}
                </div>
                <button class="copy-btn" onclick="copyToClipboard(this)">üìã Copy Azure Implementation</button>
            </div>
        </div>

        <!-- Auth0 Configuration -->
        <div class="provider-section">
            <div class="provider-title">
                <span class="provider-icon">üî∏</span>
                Auth0 Configuration
            </div>

            <div class="step-section">
                <div class="step-title">Step 1: Machine-to-Machine Application</div>
                <p>Create a Machine-to-Machine application in Auth0 Dashboard:</p>
                
                <div class="code-block">
Application Settings:
- Application Type: Machine to Machine
- Authorized APIs: Select your MCP API
- Grant Types: Client Credentials
- Token Endpoint Authentication: Client Secret (Basic)

API Configuration:
- Identifier: https://mcp-service-orchestrator.your-domain.com
- Signing Algorithm: RS256
- Token Expiration: 3600 seconds
                </div>
            </div>

            <div class="step-section">
                <div class="step-title">Step 2: Auth0 Management API Integration</div>
                <p>Configure Auth0 Management API access for token validation:</p>
                
                <div class="code-block">
// Auth0 Token Validation
public class Auth0TokenOrchestrator
{
    private readonly AuthenticationApiClient _authClient;
    private readonly ManagementApiClient _mgmtClient;

    public async Task&lt;bool&gt; ValidateClientCredentials(string clientId, string clientSecret)
    {
        try
        {
            var tokenRequest = new ClientCredentialsTokenRequest
            {
                ClientId = clientId,
                ClientSecret = clientSecret,
                Audience = "https://mcp-service-orchestrator.your-domain.com"
            };

            var tokenResponse = await _authClient.GetTokenAsync(tokenRequest);
            return !string.IsNullOrEmpty(tokenResponse.AccessToken);
        }
        catch
        {
            return false;
        }
    }
}
                </div>
                <button class="copy-btn" onclick="copyToClipboard(this)">üìã Copy Auth0 Implementation</button>
            </div>
        </div>

        <!-- AWS Cognito Configuration -->
        <div class="provider-section">
            <div class="provider-title">
                <span class="provider-icon">üü†</span>
                AWS Cognito Configuration
            </div>

            <div class="step-section">
                <div class="step-title">Step 1: User Pool and App Client</div>
                <p>Create Cognito User Pool with App Client for service account management:</p>
                
                <div class="code-block">
# AWS CLI Commands
aws cognito-idp create-user-pool \
  --pool-name "MCP-Service-Accounts" \
  --policies "PasswordPolicy={MinimumLength=12,RequireUppercase=true,RequireLowercase=true,RequireNumbers=true,RequireSymbols=true}" \
  --auto-verified-attributes email

aws cognito-idp create-user-pool-client \
  --user-pool-id &lt;pool-id&gt; \
  --client-name "MCP-Orchestrator-Client" \
  --generate-secret \
  --explicit-auth-flows "ALLOW_ADMIN_USER_PASSWORD_AUTH" "ALLOW_REFRESH_TOKEN_AUTH" \
  --supported-identity-providers "COGNITO"
                </div>
                <button class="copy-btn" onclick="copyToClipboard(this)">üìã Copy Cognito Setup</button>
            </div>

            <div class="step-section">
                <div class="step-title">Step 2: Lambda Token Orchestrator</div>
                <p>Deploy AWS Lambda function for token orchestration:</p>
                
                <div class="code-block">
// AWS Lambda Function (Node.js)
const AWS = require('aws-sdk');
const cognito = new AWS.CognitoIdentityServiceProvider();

exports.handler = async (event) => {
    try {
        // Validate client credentials with Cognito
        const authResult = await cognito.adminInitiateAuth({
            UserPoolId: process.env.USER_POOL_ID,
            ClientId: process.env.CLIENT_ID,
            AuthFlow: 'ADMIN_NO_SRP_AUTH',
            AuthParameters: {
                USERNAME: event.clientId,
                PASSWORD: event.clientSecret,
                SECRET_HASH: calculateSecretHash(event.clientId)
            }
        }).promise();

        // Exchange for service-specific token
        const serviceToken = await getServiceToken(event.serviceAccount, event.scope);
        
        return {
            statusCode: 200,
            body: JSON.stringify({
                access_token: serviceToken.token,
                expires_in: serviceToken.expiresIn,
                scope: event.scope
            })
        };
    } catch (error) {
        return {
            statusCode: 401,
            body: JSON.stringify({ error: 'Unauthorized' })
        };
    }
};
                </div>
                <button class="copy-btn" onclick="copyToClipboard(this)">üìã Copy Lambda Function</button>
            </div>
        </div>

        <!-- Service Account Token Orchestration -->
        <div class="endpoint-section">
            <h3 style="color: #2d3748; margin-top: 0;">üîÑ Service Account Token Orchestration</h3>
            <p>The core orchestration logic that all IAM providers must implement:</p>

            <div class="step-section">
                <div class="step-title">Required Endpoint: /api/mcp-auth/token</div>
                <p>This endpoint must be implemented regardless of your IAM provider choice:</p>
                
                <div class="code-block">
POST /api/mcp-auth/token
Content-Type: application/json

{
  "client_id": "your-iam-validated-client",
  "client_secret": "your-iam-validated-secret", 
  "service_account": "github-service-account",
  "scope": "repo:read"
}

Response:
{
  "access_token": "fresh-service-specific-token",
  "expires_in": 3600,
  "scope": "repo:read",
  "token_type": "Bearer"
}
                </div>
            </div>

            <div class="step-section">
                <div class="step-title">Service Account Storage</div>
                <p>Secure storage of service account credentials (never in application code):</p>
                
                <div class="table-container">
                    <table class="setup-table">
                        <thead>
                            <tr>
                                <th>Service</th>
                                <th>Credential Type</th>
                                <th>Secure Storage</th>
                                <th>Rotation Policy</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>GitHub</strong></td>
                                <td>App Private Key</td>
                                <td>Azure Key Vault / AWS Secrets Manager</td>
                                <td>Annual</td>
                            </tr>
                            <tr>
                                <td><strong>Azure DevOps</strong></td>
                                <td>Service Principal Secret</td>
                                <td>Azure Key Vault</td>
                                <td>90 days</td>
                            </tr>
                            <tr>
                                <td><strong>Confluence</strong></td>
                                <td>API Token</td>
                                <td>HashiCorp Vault / AWS Secrets</td>
                                <td>180 days</td>
                            </tr>
                            <tr>
                                <td><strong>SQL Server</strong></td>
                                <td>Connection String</td>
                                <td>Azure Key Vault / AWS Secrets</td>
                                <td>90 days</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Security Best Practices -->
        <div class="security-note">
            <h3 style="color: #e53e3e; margin-top: 0;">üîí Critical Security Requirements</h3>
            <ul>
                <li><strong>Credential Rotation:</strong> Implement automated rotation for all service account secrets</li>
                <li><strong>Audit Logging:</strong> Log all token requests with client identification and scope details</li>
                <li><strong>Rate Limiting:</strong> Implement rate limiting to prevent token abuse</li>
                <li><strong>Network Security:</strong> Use HTTPS only and restrict endpoint access to corporate networks</li>
                <li><strong>Monitoring:</strong> Alert on unusual token request patterns or failed authentication attempts</li>
                <li><strong>Least Privilege:</strong> Grant minimal scopes necessary for each service account</li>
            </ul>
        </div>

        <div class="best-practice">
            <h3 style="color: #38a169; margin-top: 0;">‚úÖ Implementation Best Practices</h3>
            <ol>
                <li><strong>Start with Okta or Azure AD:</strong> These provide the most robust enterprise features</li>
                <li><strong>Use Infrastructure as Code:</strong> Deploy service account configurations via Terraform/ARM</li>
                <li><strong>Implement Health Checks:</strong> Monitor service account credential validity</li>
                <li><strong>Test Token Exchange:</strong> Validate the full flow before deploying to developers</li>
                <li><strong>Document Emergency Procedures:</strong> Have a plan for credential compromise incidents</li>
                <li><strong>Regular Access Reviews:</strong> Quarterly reviews of service account permissions</li>
            </ol>
        </div>

        <!-- Testing Section -->
        <div class="step-section">
            <div class="step-title">üß™ Testing Your Implementation</div>
            <p>Validate your service account orchestration setup:</p>
            
            <div class="code-block">
# Test token exchange endpoint
curl -X POST https://your-domain.com/api/mcp-auth/token \
  -H "Content-Type: application/json" \
  -d '{
    "client_id": "test-client-id",
    "client_secret": "test-client-secret",
    "service_account": "github-service-account",
    "scope": "repo:read"
  }'

# Expected response
{
  "access_token": "ghs_xxxxxxxxxxxxxxxxxxxx",
  "expires_in": 3600,
  "scope": "repo:read",
  "token_type": "Bearer"
}

# Validate token works with target service
curl -H "Authorization: Bearer ghs_xxxxxxxxxxxxxxxxxxxx" \
  https://api.github.com/user
            </div>
            <button class="copy-btn" onclick="copyToClipboard(this)">üìã Copy Test Commands</button>
        </div>
    </div>

    <script>
        function copyToClipboard(button) {
            const codeBlock = button.previousElementSibling;
            if (codeBlock && codeBlock.classList.contains('code-block')) {
                navigator.clipboard.writeText(codeBlock.textContent).then(() => {
                    const originalText = button.textContent;
                    button.textContent = '‚úÖ Copied!';
                    setTimeout(() => {
                        button.textContent = originalText;
                    }, 2000);
                });
            }
        }
    </script>
</body>
</html>
