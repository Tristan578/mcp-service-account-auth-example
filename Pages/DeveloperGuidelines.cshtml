@page "/DeveloperGuidelines"
@{
    ViewData["Title"] = "AI-Assisted Development Guidelines";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2d3748;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.2em;
        }
        .subtitle {
            text-align: center;
            color: #718096;
            margin-bottom: 30px;
            font-size: 1.1em;
        }
        .ai-banner {
            background: linear-gradient(135deg, #3182ce, #2c5282);
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 25px;
            text-align: center;
            font-weight: bold;
        }
        .purpose-banner {
            background: linear-gradient(135deg, #38a169, #2f855a);
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 25px;
            text-align: center;
            font-weight: bold;
        }
        .section {
            margin-bottom: 40px;
            padding: 25px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            background-color: #f7fafc;
        }
        .section-title {
            font-size: 1.5em;
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }
        .section-icon {
            font-size: 1.8em;
            margin-right: 15px;
        }
        .subsection {
            margin-bottom: 30px;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            border-left: 4px solid #3182ce;
        }
        .subsection-title {
            font-size: 1.2em;
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 15px;
        }
        .code-block {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 16px;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            white-space: pre-wrap;
            overflow-x: auto;
        }
        .best-practice {
            background-color: #f0fff4;
            border-left: 4px solid #38a169;
            padding: 16px;
            margin: 20px 0;
            border-radius: 0 4px 4px 0;
        }
        .anti-pattern {
            background-color: #fff5f5;
            border-left: 4px solid #e53e3e;
            padding: 16px;
            margin: 20px 0;
            border-radius: 0 4px 4px 0;
        }
        .info-banner {
            background-color: #e6fffa;
            border-left: 4px solid #38b2ac;
            padding: 16px;
            margin: 20px 0;
            border-radius: 0 4px 4px 0;
        }
        .toc-section {
            background-color: #edf2f7;
            border: 2px solid #cbd5e0;
            border-radius: 8px;
            padding: 20px;
            margin: 25px 0;
        }
        .toc-columns {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        .toc-list {
            list-style: none;
            padding: 0;
        }
        .toc-list li {
            margin-bottom: 8px;
        }
        .toc-list a {
            color: #3182ce;
            text-decoration: none;
            padding: 5px 0;
            display: block;
        }
        .toc-list a:hover {
            color: #2c5282;
            text-decoration: underline;
        }
        .copy-btn {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            margin-top: 8px;
        }
        .copy-btn:hover {
            background-color: #218838;
        }
        .mcp-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .mcp-card {
            background-color: white;
            border: 2px solid #cbd5e0;
            border-radius: 8px;
            padding: 20px;
            border-left: 4px solid #3182ce;
        }
        .mcp-card h6 {
            color: #2d3748;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .two-column {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Navigation -->
        <nav style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 30px; text-align: center;">
            <a href="/" style="color: #007bff; text-decoration: none; margin: 0 15px; font-weight: bold;">üè† Home</a>
            <a href="/Permissions" style="color: #007bff; text-decoration: none; margin: 0 15px; font-weight: bold;">üîí Permissions Guide</a>
            <a href="/ServiceAccountSetup" style="color: #007bff; text-decoration: none; margin: 0 15px; font-weight: bold;">‚öôÔ∏è IAM Setup Guide</a>
            <a href="/DeveloperGuidelines" style="color: #28a745; text-decoration: none; margin: 0 15px; font-weight: bold;">ü§ñ Developer Guidelines</a>
            <a href="/MarkdownGuide" style="color: #007bff; text-decoration: none; margin: 0 15px; font-weight: bold;">üìù Markdown for AI</a>
            <a href="/FunctionalExamples" style="color: #007bff; text-decoration: none; margin: 0 15px; font-weight: bold;">üöÄ Functional Examples</a>
        </nav>

        <h1>ü§ñ AI-Assisted Enterprise Development Guidelines</h1>
        <div class="subtitle">Comprehensive patterns for productive AI collaboration in software development</div>

        <div class="ai-banner">
            üéØ For Software Developers, Architects, and Technical Leads using AI-assisted development environments
        </div>

        <div class="purpose-banner">
            üìö Practical guidelines for leveraging AI assistants effectively - from code analysis to system integration
        </div>

        <!-- Table of Contents -->
        <div class="toc-section">
            <h3 style="color: #2d3748; margin-top: 0;">üìã Table of Contents</h3>
            <div class="toc-columns">
                <ul class="toc-list">
                    <li><a href="#philosophy">üéØ AI Development Philosophy</a></li>
                    <li><a href="#mcp-education">üì° Understanding MCP Servers</a></li>
                    <li><a href="#codebase-analysis">üîç Codebase Analysis</a></li>
                    <li><a href="#data-analysis">üìä Data Analysis & Querying</a></li>
                    <li><a href="#problem-diagnosis">ü©∫ Problem Diagnosis</a></li>
                </ul>
                <ul class="toc-list">
                    <li><a href="#new-code-development">üíª New Code Development</a></li>
                    <li><a href="#system-integration">üîå System Integration</a></li>
                    <li><a href="#testing-strategies">üß™ Testing Strategies</a></li>
                    <li><a href="#documentation">üìö Documentation & Knowledge</a></li>
                    <li><a href="#anti-patterns">‚ùå Common Anti-Patterns</a></li>
                </ul>
            </div>
        </div>

        <!-- AI Development Philosophy -->
        <div id="philosophy" class="section">
            <div class="section-title">
                <span class="section-icon">üéØ</span>
                AI Development Philosophy: Assistant, Not Search Engine
            </div>
            
            <div class="two-column">
                <div class="subsection">
                    <div class="subsection-title">‚úÖ AI as Development Partner</div>
                    <ul>
                        <li><strong>Context-Aware Collaboration</strong>: AI understands your project structure and business domain</li>
                        <li><strong>Code Generation with Intent</strong>: Generate code that fits existing patterns and architecture</li>
                        <li><strong>Iterative Refinement</strong>: Work together to improve solutions through multiple iterations</li>
                        <li><strong>Knowledge Synthesis</strong>: Combine multiple data sources to provide comprehensive insights</li>
                        <li><strong>Pattern Recognition</strong>: Identify recurring patterns and suggest improvements</li>
                    </ul>
                </div>
                
                <div class="subsection">
                    <div class="subsection-title">‚ùå AI as Search Engine (Anti-Pattern)</div>
                    <ul>
                        <li><strong>Generic Code Snippets</strong>: Copy-paste code without understanding context</li>
                        <li><strong>One-Shot Queries</strong>: Ask single questions without follow-up refinement</li>
                        <li><strong>Isolated Problem Solving</strong>: Solve problems without considering system architecture</li>
                        <li><strong>Documentation Replacement</strong>: Use AI instead of reading official documentation</li>
                        <li><strong>Context-Free Development</strong>: Generate code without understanding business requirements</li>
                    </ul>
                </div>
            </div>

            <div class="best-practice">
                <h6><strong>üéØ Key Principle</strong></h6>
                <strong>AI assistants excel when they have rich context about your project, business domain, and development goals.</strong>
                The more context you provide, the more valuable their assistance becomes.
            </div>
        </div>

        <!-- MCP Education -->
        <div id="mcp-education" class="section">
            <div class="section-title">
                <span class="section-icon">üì°</span>
                Understanding Model Context Protocol (MCP) Servers
            </div>
            
            <div class="subsection">
                <div class="subsection-title">What Are MCP Servers?</div>
                <p><strong>Model Context Protocol (MCP)</strong> servers are specialized services that provide AI assistants with real-time access to enterprise systems, databases, APIs, and tools. They act as secure bridges between AI models and your development environment.</p>
            </div>

            <div class="info-banner">
                <h6><strong>üí° MCP Server Benefits</strong></h6>
                <strong>Instead of asking AI assistants to guess or hallucinate information, MCP servers provide real-time, accurate data</strong> from your actual systems, databases, and APIs.
            </div>

            <div class="mcp-cards">
                <div class="mcp-card">
                    <h6>üêô GitHub Context Server</h6>
                    <p><strong>Repository Access</strong>: Browse code, issues, pull requests, and commit history</p>
                    <ul>
                        <li>Real-time repository browsing</li>
                        <li>Issue and PR context</li>
                        <li>Commit history analysis</li>
                        <li>Branch and tag information</li>
                    </ul>
                </div>

                <div class="mcp-card">
                    <h6>‚òÅÔ∏è Azure DevOps Server</h6>
                    <p><strong>Enterprise Project Management</strong>: Work items, pipelines, and deployment tracking</p>
                    <ul>
                        <li>Work item queries and updates</li>
                        <li>Build and release pipeline status</li>
                        <li>Repository and branch management</li>
                        <li>Team and project insights</li>
                    </ul>
                </div>

                <div class="mcp-card">
                    <h6>üè¢ SQL Server Context</h6>
                    <p><strong>Database Analysis</strong>: Schema exploration and data querying</p>
                    <ul>
                        <li>Table and relationship discovery</li>
                        <li>Data pattern analysis</li>
                        <li>Query optimization suggestions</li>
                        <li>Performance monitoring insights</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Codebase Analysis -->
        <div id="codebase-analysis" class="section">
            <div class="section-title">
                <span class="section-icon">üîç</span>
                Effective Codebase Analysis with AI
            </div>

            <div class="two-column">
                <div class="subsection">
                    <div class="subsection-title">üìà Best Practices</div>
                    <ul>
                        <li><strong>Architectural Overview</strong>: Start with high-level system understanding</li>
                        <li><strong>Pattern Recognition</strong>: Identify consistent coding patterns and conventions</li>
                        <li><strong>Dependency Mapping</strong>: Understand component relationships and data flow</li>
                        <li><strong>Code Quality Assessment</strong>: Evaluate maintainability and technical debt</li>
                        <li><strong>Security Analysis</strong>: Identify potential vulnerabilities and security patterns</li>
                    </ul>
                </div>

                <div class="subsection">
                    <div class="subsection-title">üéØ Effective Prompts</div>
                    <div class="code-block">
"Analyze the architecture of this codebase and identify:
1. Main components and their responsibilities
2. Data flow between components
3. External dependencies and integration points
4. Coding patterns and conventions used
5. Potential areas for improvement"</div>
                </div>
            </div>

            <div class="best-practice">
                <h6><strong>üí° Pro Tip: Progressive Analysis</strong></h6>
                Start with broad architectural questions, then drill down into specific components. This helps AI build context progressively.
            </div>
        </div>

        <!-- Data Analysis -->
        <div id="data-analysis" class="section">
            <div class="section-title">
                <span class="section-icon">üìä</span>
                Data Analysis & Database Querying
            </div>

            <div class="subsection">
                <div class="subsection-title">Database Schema Analysis</div>
                <div class="code-block">
"Analyze this database schema and help me understand:
1. Primary entities and their relationships
2. Data flow patterns and business logic
3. Potential normalization issues
4. Missing indexes or performance concerns
5. Data consistency patterns"</div>
            </div>

            <div class="subsection">
                <div class="subsection-title">Query Optimization</div>
                <div class="code-block">
"Review this SQL query for:
1. Performance optimization opportunities
2. Index utilization
3. Alternative approaches for better efficiency
4. Potential issues with large datasets
5. Best practices compliance"</div>
            </div>

            <div class="anti-pattern">
                <h6><strong>‚ùå Avoid: Generic Query Generation</strong></h6>
                Don't ask AI to "write a query" without providing schema context. Always include table structures, relationships, and business requirements.
            </div>
        </div>

        <!-- Problem Diagnosis -->
        <div id="problem-diagnosis" class="section">
            <div class="section-title">
                <span class="section-icon">ü©∫</span>
                Problem Diagnosis & Troubleshooting
            </div>

            <div class="subsection">
                <div class="subsection-title">Systematic Troubleshooting</div>
                <ol>
                    <li><strong>Symptom Description</strong>: Clearly describe what's happening vs. what's expected</li>
                    <li><strong>Context Gathering</strong>: Provide relevant code, configuration, and error messages</li>
                    <li><strong>Environment Details</strong>: Include system, framework, and dependency versions</li>
                    <li><strong>Reproduction Steps</strong>: Share minimal steps to reproduce the issue</li>
                    <li><strong>Recent Changes</strong>: Mention any recent code or configuration changes</li>
                </ol>
            </div>

            <div class="subsection">
                <div class="subsection-title">Effective Error Analysis Prompt</div>
                <div class="code-block">
"I'm experiencing [specific issue] in my [technology/framework] application.

Error Details:
[Paste full error message and stack trace]

Relevant Code:
[Include the specific code causing the issue]

Context:
- Environment: [development/staging/production]
- Framework version: [version]
- Recent changes: [what changed recently]
- Expected behavior: [what should happen]

Can you help me:
1. Understand the root cause
2. Identify potential solutions
3. Prevent similar issues in the future"</div>
            </div>
        </div>

        <!-- New Code Development -->
        <div id="new-code-development" class="section">
            <div class="section-title">
                <span class="section-icon">üíª</span>
                New Code Development with AI
            </div>

            <div class="subsection">
                <div class="subsection-title">Context-Rich Development</div>
                <div class="code-block">
"I need to implement [specific feature] in my [technology] application.

Project Context:
- Architecture: [brief architecture description]
- Existing patterns: [coding patterns used]
- Dependencies: [relevant libraries/frameworks]
- Business requirements: [what the feature should accomplish]

Please help me:
1. Design the implementation approach
2. Generate code that follows existing patterns
3. Include appropriate error handling
4. Suggest testing strategies
5. Identify potential edge cases"</div>
            </div>

            <div class="best-practice">
                <h6><strong>‚úÖ Best Practice: Incremental Development</strong></h6>
                Build features incrementally with AI assistance. Start with interfaces and core logic, then add error handling, validation, and optimization.
            </div>
        </div>

        <!-- System Integration -->
        <div id="system-integration" class="section">
            <div class="section-title">
                <span class="section-icon">üîå</span>
                System Integration Patterns
            </div>

            <div class="subsection">
                <div class="subsection-title">API Integration Best Practices</div>
                <ul>
                    <li><strong>Authentication Strategy</strong>: Use service accounts, not personal credentials</li>
                    <li><strong>Error Handling</strong>: Implement retry logic and circuit breakers</li>
                    <li><strong>Rate Limiting</strong>: Respect API limits and implement backoff strategies</li>
                    <li><strong>Data Validation</strong>: Validate all external data before processing</li>
                    <li><strong>Monitoring</strong>: Log integration health and performance metrics</li>
                </ul>
            </div>

            <div class="subsection">
                <div class="subsection-title">Integration Planning Prompt</div>
                <div class="code-block">
"I need to integrate with [external system/API] in my application.

Requirements:
- Data to exchange: [what data needs to be shared]
- Frequency: [how often the integration runs]
- Security requirements: [authentication, encryption needs]
- Error handling: [what happens when integration fails]

Current architecture:
[Brief description of your current system]

Please help me design:
1. Integration architecture and patterns
2. Error handling and retry strategies  
3. Security implementation
4. Testing approach
5. Monitoring and alerting"</div>
            </div>
        </div>

        <!-- Testing Strategies -->
        <div id="testing-strategies" class="section">
            <div class="section-title">
                <span class="section-icon">üß™</span>
                AI-Assisted Testing Strategies
            </div>

            <div class="subsection">
                <div class="subsection-title">Test Generation Approach</div>
                <div class="code-block">
"Generate comprehensive tests for this [component/function/class]:

[Paste your code here]

Please create:
1. Unit tests covering all code paths
2. Edge case testing scenarios
3. Error condition tests
4. Integration test scenarios
5. Performance test considerations

Testing framework: [Jest/NUnit/PyTest/etc.]
Mocking library: [if applicable]"</div>
            </div>

            <div class="best-practice">
                <h6><strong>‚úÖ Testing Best Practice</strong></h6>
                Use AI to generate test cases, but always review and understand what each test is validating. AI can miss business logic nuances.
            </div>
        </div>

        <!-- Documentation -->
        <div id="documentation" class="section">
            <div class="section-title">
                <span class="section-icon">üìö</span>
                Documentation & Knowledge Management
            </div>

            <div class="subsection">
                <div class="subsection-title">Documentation Generation</div>
                <div class="code-block">
"Create comprehensive documentation for this [component/system/API]:

[Include relevant code/schemas]

Please generate:
1. Overview and purpose
2. API/interface documentation
3. Usage examples
4. Configuration options
5. Troubleshooting guide
6. Integration examples

Target audience: [developers/ops/business users]
Documentation format: [Markdown/Wiki/etc.]"</div>
            </div>

            <div class="anti-pattern">
                <h6><strong>‚ùå Avoid: Documentation Without Context</strong></h6>
                Don't generate generic documentation. Always provide specific code, business context, and target audience information.
            </div>
        </div>

        <!-- Anti-Patterns -->
        <div id="anti-patterns" class="section">
            <div class="section-title">
                <span class="section-icon">‚ùå</span>
                Common Anti-Patterns to Avoid
            </div>

            <div class="subsection">
                <div class="subsection-title">üö´ Development Anti-Patterns</div>
                <ul>
                    <li><strong>Copy-Paste Development</strong>: Using AI-generated code without understanding it</li>
                    <li><strong>Context-Free Queries</strong>: Asking for solutions without providing project context</li>
                    <li><strong>Over-Reliance</strong>: Not learning underlying concepts, just using AI output</li>
                    <li><strong>Security Ignorance</strong>: Not reviewing AI-generated code for security issues</li>
                    <li><strong>Pattern Breaking</strong>: Ignoring existing codebase patterns in favor of AI suggestions</li>
                </ul>
            </div>

            <div class="subsection">
                <div class="subsection-title">üö´ Collaboration Anti-Patterns</div>
                <ul>
                    <li><strong>Silent Implementation</strong>: Using AI without discussing with team members</li>
                    <li><strong>Documentation Skipping</strong>: Not documenting AI-assisted solutions</li>
                    <li><strong>Review Avoidance</strong>: Skipping code reviews for AI-generated code</li>
                    <li><strong>Knowledge Silos</strong>: Not sharing AI-discovered insights with the team</li>
                </ul>
            </div>

            <div class="anti-pattern">
                <h6><strong>‚ö†Ô∏è Remember: AI is a Tool, Not a Replacement</strong></h6>
                AI assistants augment your capabilities but don't replace critical thinking, code review, testing, and team collaboration.
            </div>
        </div>

        <div style="text-align: center; margin-top: 40px; padding: 20px; background-color: #f7fafc; border-radius: 8px;">
            <p><strong>üéØ Remember: Effective AI collaboration requires context, iteration, and continuous learning.</strong></p>
            <p>These guidelines evolve with technology - keep experimenting and sharing insights with your team!</p>
        </div>
    </div>

    <script>
        function copyToClipboard(button) {
            const codeBlock = button.previousElementSibling;
            if (codeBlock && codeBlock.classList.contains('code-block')) {
                navigator.clipboard.writeText(codeBlock.textContent).then(() => {
                    const originalText = button.textContent;
                    button.textContent = '‚úÖ Copied!';
                    setTimeout(() => {
                        button.textContent = originalText;
                    }, 2000);
                });
            }
        }
    </script>
</body>
</html>
