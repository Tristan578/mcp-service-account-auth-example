@page
@model mcp_service_account_auth_example.Pages.IndexModel
@{
    ViewData["Title"] = "MCP Service Account Auth for VS Code Developers";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2d3748;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.2em;
        }
        .subtitle {
            text-align: center;
            color: #718096;
            margin-bottom: 30px;
            font-size: 1.1em;
        }
        .security-banner {
            background: linear-gradient(135deg, #e53e3e, #c53030);
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 25px;
            text-align: center;
            font-weight: bold;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #4a5568;
        }
        input[type="text"], input[type="password"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 14px;
        }
        .submit-btn {
            background-color: #007bff;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
        }
        .submit-btn:hover {
            background-color: #0056b3;
        }
        .result-section {
            margin-top: 30px;
            padding: 20px;
            border-radius: 4px;
        }
        .success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        textarea {
            width: 100%;
            height: 200px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: monospace;
            font-size: 12px;
            resize: vertical;
            box-sizing: border-box;
        }
        .token-info {
            margin-top: 15px;
            font-size: 14px;
        }
        .client-examples {
            margin-top: 30px;
            padding: 20px;
            background-color: #e9ecef;
            border-radius: 4px;
        }
        .client-examples h3 {
            margin-top: 0;
            color: #495057;
        }
        .client-example {
            margin-bottom: 15px;
            padding: 10px;
            background-color: white;
            border-radius: 4px;
            border-left: 4px solid #007bff;
        }
        .client-id {
            font-family: monospace;
            font-weight: bold;
            color: #007bff;
        }
        .client-secret {
            font-family: monospace;
            color: #6c757d;
        }
        .scopes {
            font-style: italic;
            color: #28a745;
        }
        
        .client-example {
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .client-example:hover {
            background-color: #f8f9fa;
            border-left-color: #17a2b8;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .selected-service {
            background-color: #e3f2fd !important;
            border-left-color: #2196f3 !important;
            border-left-width: 6px !important;
        }
        
        .config-files {
            margin-top: 30px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }
        
        .config-file {
            margin-bottom: 20px;
            background-color: white;
            border-radius: 4px;
            border: 1px solid #ddd;
        }
        
        .config-header {
            padding: 12px 16px;
            background-color: #6c757d;
            color: white;
            font-weight: bold;
            border-radius: 4px 4px 0 0;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .config-header:hover {
            background-color: #5a6268;
        }
        
        .config-content {
            padding: 16px;
            display: none;
        }
        
        .config-content.show {
            display: block;
        }
        
        .json-code {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 12px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            white-space: pre-wrap;
            overflow-x: auto;
            max-height: 400px;
            overflow-y: auto;
        }
        
        .copy-btn {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            margin-top: 8px;
        }
        
        .copy-btn:hover {
            background-color: #218838;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîê MCP Service Account Auth</h1>
        <div class="subtitle">Stop putting personal tokens in your VS Code settings!</div>
        
        <div class="security-banner">
            ‚ö†Ô∏è This demo shows how to configure MCP servers in VS Code WITHOUT personal credentials ‚ö†Ô∏è
        </div>
        
        <p style="text-align: center; color: #666; margin-bottom: 30px;">
            <strong>For developers manually configuring MCP servers in Visual Studio Code</strong><br>
            Secure GitHub Copilot context ‚Ä¢ No personal tokens ‚Ä¢ Dynamic authentication
        </p>
        
        <form method="post">
            @Html.AntiForgeryToken()
            <div class="form-group">
                <label for="ClientId">Client ID:</label>
                <input type="text" id="ClientId" name="ClientId" value="@(string.IsNullOrEmpty(Model.ClientId) ? "github-service-account" : Model.ClientId)" required placeholder="Try: github-service-account" />
            </div>
            
            <div class="form-group">
                <label for="ClientSecret">Client Secret:</label>
                <input type="password" id="ClientSecret" name="ClientSecret" value="@(string.IsNullOrEmpty(Model.ClientSecret) ? "ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" : Model.ClientSecret)" required placeholder="Try: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" />
            </div>
            
            <button type="submit" class="submit-btn">Get Token</button>
        </form>

        @if (!string.IsNullOrEmpty(Model.ResultMessage))
        {
            if (Model.IsSuccess)
            {
                <div class="result-section success">
                    <h3>‚úÖ Authentication Successful</h3>
                    <p>@Model.ResultMessage</p>
                    
                    <label for="jwt-token">Generated JWT Token:</label>
                    <textarea id="jwt-token" readonly>@Model.GeneratedToken</textarea>
                    
                    <div class="token-info">
                        <strong>Token Information:</strong><br />
                        ‚Ä¢ Issuer: https://dev-12345.okta.com/oauth2/default<br />
                        ‚Ä¢ Subject: @Model.ClientId<br />
                        ‚Ä¢ Audience: api://mcp-server<br />
                        ‚Ä¢ Scopes: @string.Join(", ", Model.TokenScopes ?? Array.Empty<string>())<br />
                        ‚Ä¢ Expires: @Model.TokenExpiration?.ToString("yyyy-MM-dd HH:mm:ss UTC")
                    </div>
                </div>
            }
            else
            {
                <div class="result-section error">
                    <h3>‚ùå Authentication Failed</h3>
                    <p>@Model.ResultMessage</p>
                </div>
            }
        }

        <div class="client-examples">
            <h3>ÔøΩ VS Code MCP Server Examples</h3>
            <p><strong>Use these service accounts in your VS Code settings instead of personal tokens:</strong></p>
            
            <div class="client-example" data-client-id="github-service-account" data-client-secret="ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" data-service-type="github">
                <strong>üêô GitHub Context Server</strong> (Personal Access Token authentication)<br />
                Client ID: <span class="client-id">github-service-account</span><br />
                Client Secret: <span class="client-secret">ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br />
                VS Code config: <span class="scopes">"GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"</span><br />
                <small>‚úÖ PAT stored in service account, not your VS Code settings</small>
            </div>
            
            <div class="client-example" data-client-id="sqlserver-service-account" data-client-secret="Server=server.database.windows.net;Database=MyDb;Authentication=Active Directory Service Principal;User Id=12345678-1234-1234-1234-123456789012;Password=MySecretPassword123!" data-service-type="sqlserver">
                <strong>üè¢ Microsoft SQL Server Context Server</strong> (Azure AD Service Principal)<br />
                Client ID: <span class="client-id">sqlserver-service-account</span><br />
                Client Secret: <span class="client-secret">Server=server.database.windows.net;Database=MyDb;Authentication=Active Directory Service Principal;User Id=12345678-1234-1234-1234-123456789012;Password=MySecretPassword123!</span><br />
                VS Code config: <span class="scopes">"CONNECTION_STRING": "${mcp_service_token:sqlserver-service-account}"</span><br />
                <small>‚úÖ Service Principal auth with Entra ID, no SQL auth passwords</small>
            </div>
            
            <div class="client-example" data-client-id="azure-service-account" data-client-secret="12345678-1234-1234-1234-123456789012~abcdefghijklmnopqrstuvwxyz" data-service-type="azure">
                <strong>‚òÅÔ∏è Azure Context Server</strong> (Service Principal with Client Secret)<br />
                Client ID: <span class="client-id">azure-service-account</span><br />
                Client Secret: <span class="client-secret">12345678-1234-1234-1234-123456789012~abcdefghijklmnopqrstuvwxyz</span><br />
                VS Code config: <span class="scopes">"AZURE_CLIENT_SECRET": "${mcp_service_token:azure-service-account}"</span><br />
                <small>‚úÖ Azure Service Principal for Azure Resource Manager API access</small>
            </div>
            
            <div class="client-example">
                <strong>ÔøΩ MuleSoft Context Server</strong> (Connected App Token)<br />
                Client ID: <span class="client-id">mulesoft-service-account</span><br />
                Client Secret: <span class="client-secret">mule_bearer_token_abc123def456ghi789jkl012mno345</span><br />
                VS Code config: <span class="scopes">"MULESOFT_BEARER_TOKEN": "${mcp_service_token:mulesoft-service-account}"</span><br />
                <small>‚úÖ Anypoint Platform Connected App for API Management access</small>
            </div>
            
            <div class="client-example" data-client-id="sonarqube-service-account" data-client-secret="sqp_1234567890abcdef1234567890abcdef12345678" data-service-type="sonarqube">
                <strong>üìä SonarQube Context Server</strong> (Project Analysis Token)<br />
                Client ID: <span class="client-id">sonarqube-service-account</span><br />
                Client Secret: <span class="client-secret">sqp_1234567890abcdef1234567890abcdef12345678</span><br />
                VS Code config: <span class="scopes">"SONAR_TOKEN": "${mcp_service_token:sonarqube-service-account}"</span><br />
                <small>‚úÖ Project analysis token for code quality integration</small>
            </div>
            
            <div class="client-example" data-client-id="playwright-service-account" data-client-secret="pw_api_key_abcd1234efgh5678ijkl9012mnop3456qrst7890" data-service-type="playwright">
                <strong>üé≠ Playwright Context Server</strong> (API Key)<br />
                Client ID: <span class="client-id">playwright-service-account</span><br />
                Client Secret: <span class="client-secret">pw_api_key_abcd1234efgh5678ijkl9012mnop3456qrst7890</span><br />
                VS Code config: <span class="scopes">"PLAYWRIGHT_API_KEY": "${mcp_service_token:playwright-service-account}"</span><br />
                <small>‚úÖ Playwright Test API for browser automation context</small>
            </div>
            
            <div style="margin-top: 20px; padding: 15px; background-color: #e8f5e8; border-radius: 4px; border-left: 4px solid #28a745;">
                <strong>‚ú® Benefits for AI-Assisted Development Environments:</strong><br />
                ‚Ä¢ ‚úÖ No personal GitHub PATs in any IDE configuration files<br />
                ‚Ä¢ ‚úÖ No connection strings with passwords in settings<br />
                ‚Ä¢ ‚úÖ Safe to sync development environment settings to cloud/GitHub<br />
                ‚Ä¢ ‚úÖ Works with GitHub Copilot, Claude, and other AI assistants automatically<br />
                ‚Ä¢ ‚úÖ Fresh tokens every time MCP servers start<br />
                ‚Ä¢ ‚úÖ Complete audit trail for AI context access<br />
                ‚Ä¢ ‚úÖ Scope-based permissions for AI assistants<br />
                ‚Ä¢ ‚úÖ Enterprise-grade authentication with real-world patterns<br />
                ‚Ä¢ ‚úÖ Supports VS Code, Visual Studio, Claude Desktop, Claude Code, and Windsurf<br />
                ‚Ä¢ ‚úÖ Universal service account pattern across all development environments
            </div>
        </div>
        
        <div class="config-files" id="config-files">
            <h3>üìÅ Configuration Files for Different Environments</h3>
            <p><strong>Click on any service above to auto-populate these configurations!</strong></p>
            
            <div class="config-file">
                <div class="config-header" onclick="toggleConfig('vscode')">
                    üîß VS Code Settings (settings.json)
                    <span>‚ñº</span>
                </div>
                <div class="config-content" id="vscode-config">
                    <div class="json-code" id="vscode-json">Loading...</div>
                    <button class="copy-btn" onclick="copyToClipboard('vscode-json')">üìã Copy Configuration</button>
                </div>
            </div>
            
            <div class="config-file">
                <div class="config-header" onclick="toggleConfig('claude')">
                    ü§ñ Claude Desktop Configuration (claude_desktop_config.json)
                    <span>‚ñº</span>
                </div>
                <div class="config-content" id="claude-config">
                    <div class="json-code" id="claude-json">Loading...</div>
                    <button class="copy-btn" onclick="copyToClipboard('claude-json')">üìã Copy Configuration</button>
                </div>
            </div>
            
            <div class="config-file">
                <div class="config-header" onclick="toggleConfig('windsurf')">
                    üåä Windsurf Configuration (windsurf-mcp.json)
                    <span>‚ñº</span>
                </div>
                <div class="config-content" id="windsurf-config">
                    <div class="json-code" id="windsurf-json">Loading...</div>
                    <button class="copy-btn" onclick="copyToClipboard('windsurf-json')">üìã Copy Configuration</button>
                </div>
            </div>
            
            <div class="config-file">
                <div class="config-header" onclick="toggleConfig('visualstudio')">
                    üè¢ Visual Studio Configuration (mcp-servers.json)
                    <span>‚ñº</span>
                </div>
                <div class="config-content" id="visualstudio-config">
                    <div class="json-code" id="visualstudio-json">Loading...</div>
                    <button class="copy-btn" onclick="copyToClipboard('visualstudio-json')">üìã Copy Configuration</button>
                </div>
            </div>
            
            <div class="config-file">
                <div class="config-header" onclick="toggleConfig('claudecode')">
                    üíª Claude Code Configuration (.claude/settings.json)
                    <span>‚ñº</span>
                </div>
                <div class="config-content" id="claudecode-config">
                    <div class="json-code" id="claudecode-json">Loading...</div>
                    <button class="copy-btn" onclick="copyToClipboard('claudecode-json')">üìã Copy Configuration</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuration templates for each environment
        const configTemplates = {
            vscode: {
                default: {
                    "mcp.servers": {
                        "github-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-github"],
                            "env": {
                                "GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"
                            }
                        }
                    },
                    "github.copilot.advanced": {
                        "debug": false,
                        "inlineSuggestEnable": true
                    },
                    "github.copilot.enable": {
                        "*": true,
                        "yaml": true,
                        "plaintext": false
                    }
                },
                github: {
                    "mcp.servers": {
                        "github-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-github"],
                            "env": {
                                "GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"
                            }
                        }
                    },
                    "github.copilot.advanced": {
                        "debug": false,
                        "inlineSuggestEnable": true
                    }
                },
                sqlserver: {
                    "mcp.servers": {
                        "sqlserver-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-sqlserver"],
                            "env": {
                                "CONNECTION_STRING": "${mcp_service_token:sqlserver-service-account}"
                            }
                        }
                    }
                },
                azure: {
                    "mcp.servers": {
                        "azure-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-azure"],
                            "env": {
                                "AZURE_CLIENT_SECRET": "${mcp_service_token:azure-service-account}",
                                "AZURE_CLIENT_ID": "12345678-1234-1234-1234-123456789012",
                                "AZURE_TENANT_ID": "87654321-4321-4321-4321-210987654321"
                            }
                        }
                    }
                },
                mulesoft: {
                    "mcp.servers": {
                        "mulesoft-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-mulesoft"],
                            "env": {
                                "MULESOFT_BEARER_TOKEN": "${mcp_service_token:mulesoft-service-account}",
                                "ANYPOINT_BASE_URL": "https://anypoint.mulesoft.com"
                            }
                        }
                    }
                },
                sonarqube: {
                    "mcp.servers": {
                        "sonarqube-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-sonarqube"],
                            "env": {
                                "SONAR_TOKEN": "${mcp_service_token:sonarqube-service-account}",
                                "SONAR_HOST_URL": "https://sonarqube.company.com"
                            }
                        }
                    }
                },
                playwright: {
                    "mcp.servers": {
                        "playwright-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-playwright"],
                            "env": {
                                "PLAYWRIGHT_API_KEY": "${mcp_service_token:playwright-service-account}",
                                "PLAYWRIGHT_BASE_URL": "https://api.playwright.dev"
                            }
                        }
                    }
                }
            },
            claude: {
                default: {
                    "mcpServers": {
                        "github-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-github"],
                            "env": {
                                "GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"
                            }
                        }
                    }
                },
                github: {
                    "mcpServers": {
                        "github-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-github"],
                            "env": {
                                "GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"
                            }
                        }
                    }
                },
                sqlserver: {
                    "mcpServers": {
                        "sqlserver-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-sqlserver"],
                            "env": {
                                "CONNECTION_STRING": "${mcp_service_token:sqlserver-service-account}"
                            }
                        }
                    }
                },
                azure: {
                    "mcpServers": {
                        "azure-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-azure"],
                            "env": {
                                "AZURE_CLIENT_SECRET": "${mcp_service_token:azure-service-account}",
                                "AZURE_CLIENT_ID": "12345678-1234-1234-1234-123456789012",
                                "AZURE_TENANT_ID": "87654321-4321-4321-4321-210987654321"
                            }
                        }
                    }
                },
                mulesoft: {
                    "mcpServers": {
                        "mulesoft-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-mulesoft"],
                            "env": {
                                "MULESOFT_BEARER_TOKEN": "${mcp_service_token:mulesoft-service-account}",
                                "ANYPOINT_BASE_URL": "https://anypoint.mulesoft.com"
                            }
                        }
                    }
                },
                sonarqube: {
                    "mcpServers": {
                        "sonarqube-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-sonarqube"],
                            "env": {
                                "SONAR_TOKEN": "${mcp_service_token:sonarqube-service-account}",
                                "SONAR_HOST_URL": "https://sonarqube.company.com"
                            }
                        }
                    }
                },
                playwright: {
                    "mcpServers": {
                        "playwright-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-playwright"],
                            "env": {
                                "PLAYWRIGHT_API_KEY": "${mcp_service_token:playwright-service-account}",
                                "PLAYWRIGHT_BASE_URL": "https://api.playwright.dev"
                            }
                        }
                    }
                }
            },
            windsurf: {
                default: {
                    "mcpServers": {
                        "github-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-github"],
                            "env": {
                                "GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"
                            }
                        }
                    },
                    "codeium": {
                        "enableAutocompletions": true,
                        "enableChatContext": true
                    }
                },
                github: {
                    "mcpServers": {
                        "github-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-github"],
                            "env": {
                                "GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"
                            }
                        }
                    },
                    "codeium": {
                        "enableAutocompletions": true,
                        "enableChatContext": true
                    }
                },
                sqlserver: {
                    "mcpServers": {
                        "sqlserver-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-sqlserver"],
                            "env": {
                                "CONNECTION_STRING": "${mcp_service_token:sqlserver-service-account}"
                            }
                        }
                    },
                    "codeium": {
                        "enableAutocompletions": true,
                        "enableChatContext": true
                    }
                },
                azure: {
                    "mcpServers": {
                        "azure-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-azure"],
                            "env": {
                                "AZURE_CLIENT_SECRET": "${mcp_service_token:azure-service-account}",
                                "AZURE_CLIENT_ID": "12345678-1234-1234-1234-123456789012",
                                "AZURE_TENANT_ID": "87654321-4321-4321-4321-210987654321"
                            }
                        }
                    },
                    "codeium": {
                        "enableAutocompletions": true,
                        "enableChatContext": true
                    }
                },
                mulesoft: {
                    "mcpServers": {
                        "mulesoft-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-mulesoft"],
                            "env": {
                                "MULESOFT_BEARER_TOKEN": "${mcp_service_token:mulesoft-service-account}",
                                "ANYPOINT_BASE_URL": "https://anypoint.mulesoft.com"
                            }
                        }
                    },
                    "codeium": {
                        "enableAutocompletions": true,
                        "enableChatContext": true
                    }
                },
                sonarqube: {
                    "mcpServers": {
                        "sonarqube-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-sonarqube"],
                            "env": {
                                "SONAR_TOKEN": "${mcp_service_token:sonarqube-service-account}",
                                "SONAR_HOST_URL": "https://sonarqube.company.com"
                            }
                        }
                    },
                    "codeium": {
                        "enableAutocompletions": true,
                        "enableChatContext": true
                    }
                },
                playwright: {
                    "mcpServers": {
                        "playwright-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-playwright"],
                            "env": {
                                "PLAYWRIGHT_API_KEY": "${mcp_service_token:playwright-service-account}",
                                "PLAYWRIGHT_BASE_URL": "https://api.playwright.dev"
                            }
                        }
                    },
                    "codeium": {
                        "enableAutocompletions": true,
                        "enableChatContext": true
                    }
                }
            },
            visualstudio: {
                default: {
                    "mcpServers": [
                        {
                            "name": "github-context",
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-github"],
                            "env": {
                                "GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"
                            },
                            "description": "GitHub repository context and operations"
                        }
                    ],
                    "agentMode": {
                        "enabled": true,
                        "defaultProvider": "github-copilot"
                    }
                },
                github: {
                    "mcpServers": [
                        {
                            "name": "github-context",
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-github"],
                            "env": {
                                "GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"
                            },
                            "description": "GitHub repository context and operations"
                        }
                    ],
                    "agentMode": {
                        "enabled": true,
                        "defaultProvider": "github-copilot"
                    }
                },
                sqlserver: {
                    "mcpServers": [
                        {
                            "name": "sqlserver-context",
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-sqlserver"],
                            "env": {
                                "CONNECTION_STRING": "${mcp_service_token:sqlserver-service-account}"
                            },
                            "description": "SQL Server database context and operations"
                        }
                    ]
                },
                azure: {
                    "mcpServers": [
                        {
                            "name": "azure-context",
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-azure"],
                            "env": {
                                "AZURE_CLIENT_SECRET": "${mcp_service_token:azure-service-account}",
                                "AZURE_CLIENT_ID": "12345678-1234-1234-1234-123456789012",
                                "AZURE_TENANT_ID": "87654321-4321-4321-4321-210987654321"
                            },
                            "description": "Azure Resource Manager context and operations"
                        }
                    ]
                },
                mulesoft: {
                    "mcpServers": [
                        {
                            "name": "mulesoft-context",
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-mulesoft"],
                            "env": {
                                "MULESOFT_BEARER_TOKEN": "${mcp_service_token:mulesoft-service-account}",
                                "ANYPOINT_BASE_URL": "https://anypoint.mulesoft.com"
                            },
                            "description": "MuleSoft Anypoint Platform context and operations"
                        }
                    ]
                },
                sonarqube: {
                    "mcpServers": [
                        {
                            "name": "sonarqube-context",
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-sonarqube"],
                            "env": {
                                "SONAR_TOKEN": "${mcp_service_token:sonarqube-service-account}",
                                "SONAR_HOST_URL": "https://sonarqube.company.com"
                            },
                            "description": "SonarQube code quality analysis context"
                        }
                    ]
                },
                playwright: {
                    "mcpServers": [
                        {
                            "name": "playwright-context",
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-playwright"],
                            "env": {
                                "PLAYWRIGHT_API_KEY": "${mcp_service_token:playwright-service-account}",
                                "PLAYWRIGHT_BASE_URL": "https://api.playwright.dev"
                            },
                            "description": "Playwright browser automation context"
                        }
                    ]
                }
            },
            claudecode: {
                default: {
                    "mcpServers": {
                        "github-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-github"],
                            "env": {
                                "GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"
                            }
                        }
                    },
                    "hooks": {
                        "PreToolUse": []
                    }
                },
                github: {
                    "mcpServers": {
                        "github-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-github"],
                            "env": {
                                "GITHUB_PERSONAL_ACCESS_TOKEN": "${mcp_service_token:github-service-account}"
                            }
                        }
                    },
                    "hooks": {
                        "PreToolUse": []
                    }
                },
                sqlserver: {
                    "mcpServers": {
                        "sqlserver-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-sqlserver"],
                            "env": {
                                "CONNECTION_STRING": "${mcp_service_token:sqlserver-service-account}"
                            }
                        }
                    }
                },
                azure: {
                    "mcpServers": {
                        "azure-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-azure"],
                            "env": {
                                "AZURE_CLIENT_SECRET": "${mcp_service_token:azure-service-account}",
                                "AZURE_CLIENT_ID": "12345678-1234-1234-1234-123456789012",
                                "AZURE_TENANT_ID": "87654321-4321-4321-4321-210987654321"
                            }
                        }
                    }
                },
                mulesoft: {
                    "mcpServers": {
                        "mulesoft-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-mulesoft"],
                            "env": {
                                "MULESOFT_BEARER_TOKEN": "${mcp_service_token:mulesoft-service-account}",
                                "ANYPOINT_BASE_URL": "https://anypoint.mulesoft.com"
                            }
                        }
                    }
                },
                sonarqube: {
                    "mcpServers": {
                        "sonarqube-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-sonarqube"],
                            "env": {
                                "SONAR_TOKEN": "${mcp_service_token:sonarqube-service-account}",
                                "SONAR_HOST_URL": "https://sonarqube.company.com"
                            }
                        }
                    }
                },
                playwright: {
                    "mcpServers": {
                        "playwright-context": {
                            "command": "npx",
                            "args": ["-y", "@@modelcontextprotocol/server-playwright"],
                            "env": {
                                "PLAYWRIGHT_API_KEY": "${mcp_service_token:playwright-service-account}",
                                "PLAYWRIGHT_BASE_URL": "https://api.playwright.dev"
                            }
                        }
                    }
                }
            }
        };

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            updateAllConfigs('default');
            
            // Add click handlers to client examples
            document.querySelectorAll('.client-example').forEach(function(element) {
                element.addEventListener('click', function() {
                    // Remove previous selection
                    document.querySelectorAll('.client-example').forEach(el => el.classList.remove('selected-service'));
                    
                    // Mark as selected
                    element.classList.add('selected-service');
                    
                    // Update form fields
                    const clientId = element.getAttribute('data-client-id');
                    const clientSecret = element.getAttribute('data-client-secret');
                    const serviceType = element.getAttribute('data-service-type');
                    
                    document.getElementById('ClientId').value = clientId;
                    document.getElementById('ClientSecret').value = clientSecret;
                    
                    // Update configuration files
                    updateAllConfigs(serviceType);
                    
                    // Scroll to config files
                    document.getElementById('config-files').scrollIntoView({ behavior: 'smooth' });
                });
            });
        });

        function updateAllConfigs(serviceType) {
            updateConfig('vscode', serviceType);
            updateConfig('claude', serviceType);
            updateConfig('windsurf', serviceType);
            updateConfig('visualstudio', serviceType);
            updateConfig('claudecode', serviceType);
        }

        function updateConfig(environment, serviceType) {
            const template = configTemplates[environment][serviceType] || configTemplates[environment].default;
            const jsonElement = document.getElementById(environment + '-json');
            jsonElement.textContent = JSON.stringify(template, null, 2);
        }

        function toggleConfig(environment) {
            const content = document.getElementById(environment + '-config');
            const header = content.previousElementSibling;
            const arrow = header.querySelector('span');
            
            if (content.classList.contains('show')) {
                content.classList.remove('show');
                arrow.textContent = '‚ñº';
            } else {
                content.classList.add('show');
                arrow.textContent = '‚ñ≤';
            }
        }

        function copyToClipboard(elementId) {
            const element = document.getElementById(elementId);
            const textArea = document.createElement('textarea');
            textArea.value = element.textContent;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            
            // Show feedback
            const button = element.nextElementSibling;
            const originalText = button.textContent;
            button.textContent = '‚úÖ Copied!';
            button.style.backgroundColor = '#28a745';
            
            setTimeout(() => {
                button.textContent = originalText;
                button.style.backgroundColor = '#28a745';
            }, 2000);
        }
    </script>
</body>
</html>

